{"ast":null,"code":"var _jsxFileName = \"/Users/carolinejustafre/Desktop/ToDoListReact/src/App.js\",\n  _s = $RefreshSig$();\n/**\n * Composant fonctionnel App qui gère l'application To-Do List.\n * \n * Fonctionnalité :\n * Le composant retourne l'interface utilisateur de l'application To-Do List, qui se compose d'un en-tête contenant le titre et le formulaire d'ajout de tâche, et d'une liste de tâches. \n * Si la liste des tâches est vide, un message est affiché pour indiquer qu'il n'y a pas de tâche à faire.\n * Lorsqu'un utilisateur ajoute une tâche en utilisant le formulaire AddTask, la fonction addTask est appelée pour ajouter la tâche à la liste. \n * Lorsqu'un utilisateur édite une tâche en utilisant le composant EditTask, la fonction editTask est appelée pour mettre à jour la tâche dans la liste.\n * Lorsqu'un utilisateur supprime une tâche en utilisant le bouton de suppression de Task, la fonction deleteTask est appelée pour supprimer la tâche de la liste.\n * \n * --------------------------------------------------\n * \n * Importation :\n * React : Module principal de React.\n * useState : Fonction React permettant de définir et de mettre à jour l'état d'un composant.\n * Task : Composant fonctionnel pour afficher une tâche de la liste.\n * AddTask : Composant fonctionnel pour ajouter une nouvelle tâche à la liste.\n * EditTask : Composant fonctionnel pour éditer une tâche de la liste.\n * \n * --------------------------------------------------\n * \n * État :\n * tasks : état local contenant la liste des tâches.\n * \n * --------------------------------------------------\n * \n * Fonctions :\n * addTask : fonction appelée lorsque l'utilisateur ajoute une tâche. Elle génère un id aléatoire pour la nouvelle tâche et l'ajoute à la liste des tâches.\n * editTask : fonction appelée lorsque l'utilisateur édite une tâche. Elle met à jour la tâche dans la liste en utilisant l'id de la tâche éditée.\n * deleteTask : fonction appelée lorsque l'utilisateur supprime une tâche. Elle filtre la liste des tâches pour ne garder que les tâches dont l'id est différent de celui de la tâche à supprimer.\n * \n * --------------------------------------------------\n * \n * Puis exportation du composant App.\n */\n\nimport React, { useState } from 'react';\nimport AddTask from './components/AddTask';\nimport Task from './components/Task';\nimport EditTask from './components/EditTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([{\n    id: 1,\n    text: 'Faire les courses'\n  }, {\n    id: 2,\n    text: 'Jouer à la play'\n  }, {\n    id: 3,\n    text: 'Sortir le chien'\n  }]);\n  const addTask = task => {\n    const id = Math.floor(Math.random() * 10000) + 1;\n    const newTask = {\n      id,\n      ...task\n    };\n    setTasks([...tasks, newTask]);\n  };\n  const [editing, setEditing] = useState(false);\n  const editTask = editedTask => {\n    setTasks(tasks.map(task => task.id === editedTask.id ? editedTask : task));\n    setEditing(false);\n  };\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ma To-Do List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n        task: task,\n        onDelete: deleteTask,\n        onEdit: editTask\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-tasks\",\n      children: \"Pas de t\\xE2che\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"u6+XELHwozITk5o51OZHLR3r2/c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","AddTask","Task","EditTask","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","id","text","addTask","task","Math","floor","random","newTask","editing","setEditing","editTask","editedTask","map","deleteTask","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAdd","length","onDelete","onEdit","_c","$RefreshReg$"],"sources":["/Users/carolinejustafre/Desktop/ToDoListReact/src/App.js"],"sourcesContent":["/**\n * Composant fonctionnel App qui gère l'application To-Do List.\n * \n * Fonctionnalité :\n * Le composant retourne l'interface utilisateur de l'application To-Do List, qui se compose d'un en-tête contenant le titre et le formulaire d'ajout de tâche, et d'une liste de tâches. \n * Si la liste des tâches est vide, un message est affiché pour indiquer qu'il n'y a pas de tâche à faire.\n * Lorsqu'un utilisateur ajoute une tâche en utilisant le formulaire AddTask, la fonction addTask est appelée pour ajouter la tâche à la liste. \n * Lorsqu'un utilisateur édite une tâche en utilisant le composant EditTask, la fonction editTask est appelée pour mettre à jour la tâche dans la liste.\n * Lorsqu'un utilisateur supprime une tâche en utilisant le bouton de suppression de Task, la fonction deleteTask est appelée pour supprimer la tâche de la liste.\n * \n * --------------------------------------------------\n * \n * Importation :\n * React : Module principal de React.\n * useState : Fonction React permettant de définir et de mettre à jour l'état d'un composant.\n * Task : Composant fonctionnel pour afficher une tâche de la liste.\n * AddTask : Composant fonctionnel pour ajouter une nouvelle tâche à la liste.\n * EditTask : Composant fonctionnel pour éditer une tâche de la liste.\n * \n * --------------------------------------------------\n * \n * État :\n * tasks : état local contenant la liste des tâches.\n * \n * --------------------------------------------------\n * \n * Fonctions :\n * addTask : fonction appelée lorsque l'utilisateur ajoute une tâche. Elle génère un id aléatoire pour la nouvelle tâche et l'ajoute à la liste des tâches.\n * editTask : fonction appelée lorsque l'utilisateur édite une tâche. Elle met à jour la tâche dans la liste en utilisant l'id de la tâche éditée.\n * deleteTask : fonction appelée lorsque l'utilisateur supprime une tâche. Elle filtre la liste des tâches pour ne garder que les tâches dont l'id est différent de celui de la tâche à supprimer.\n * \n * --------------------------------------------------\n * \n * Puis exportation du composant App.\n */\n\nimport React, { useState } from 'react'; \nimport AddTask from './components/AddTask'; \nimport Task from './components/Task';\nimport EditTask from './components/EditTask';\n\n\nfunction App() { \n\n    const [tasks, setTasks] = useState([ \n        {\n            id: 1,\n            text: 'Faire les courses',\n        },\n        {\n            id: 2,\n            text: 'Jouer à la play',\n        },\n        {\n            id: 3,\n            text: 'Sortir le chien',\n        },\n    ]);\n\n    const addTask = (task) => { \n        const id = Math.floor(Math.random() * 10000) + 1;\n        const newTask = { id, ...task };\n        setTasks([...tasks, newTask]);\n    };\n\n    const [editing, setEditing] = useState(false);\n    const editTask = (editedTask) => {\n        setTasks(tasks.map((task) => (task.id === editedTask.id ? editedTask : task)));\n        setEditing(false);\n    };\n\n    const deleteTask = (id) => { \n        setTasks(tasks.filter((task) => task.id !== id));\n    };\n\n    return ( \n        <div className='container'>\n\n            <header className='header'>\n                <h1>Ma To-Do List</h1>\n                <AddTask onAdd={addTask} /> \n            </header>\n\n            {tasks.length > 0 ? (\n\n                <div className='tasks'>\n                    {tasks.map((task) => (\n                        <Task key={task.id} task={task} onDelete={deleteTask} onEdit={editTask} />\n                    ))}\n                </div>\n\n            ) : ( \n\n                <p className='no-tasks'>Pas de tâche</p>\n\n            )}\n\n        </div>\n    );\n}\n\nexport default App; \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}