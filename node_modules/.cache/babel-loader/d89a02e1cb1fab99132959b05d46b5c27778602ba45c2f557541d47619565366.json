{"ast":null,"code":"var _jsxFileName = \"/Users/carolinejustafre/Desktop/ToDoListReact/src/components/EditTask.jsx\",\n  _s = $RefreshSig$();\n/**\n * Composant fonctionnel EditTask qui gère l'édition d'une tâche.\n * \n * Fonctionnalité :\n * Le composant retourne un formulaire permettant de modifier le texte d'une tâche.\n * Lorsque l'utilisateur soumet le formulaire, la fonction onEdit est appelée avec la tâche éditée.\n * Si le champ de texte est vide, une alerte est affichée pour indiquer qu'il faut ajouter une tâche.\n * \n * --------------------------------------------------\n * \n * Importation :\n * React : Module principal de React.\n * useState : Fonction React permettant de définir et de mettre à jour l'état d'un composant.\n * \n * --------------------------------------------------\n * \n * Props :\n * task : la tâche à éditer.\n * onEdit : fonction qui sera appelée lorsque l'utilisateur soumettra le formulaire d'édition.\n * \n * --------------------------------------------------\n * \n * État :\n * text : état local contenant le texte de la tâche éditée.\n * \n * --------------------------------------------------\n * \n * Fonctions :\n * onSubmit : fonction appelée lorsque l'utilisateur soumet le formulaire d'édition.\n * \n * --------------------------------------------------\n * \n * Puis exportation du composant EditTask afin d'être utilisé dans App.jsx.\n*/\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditTask = _ref => {\n  _s();\n  let {\n    task,\n    onEdit,\n    onCancel\n  } = _ref;\n  const [text, setText] = useState(task.text);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!text) {\n      alert('Veuillez entrer une tâche');\n      return;\n    }\n    onEdit({\n      id: task.id,\n      text\n    });\n    setText('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"add-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Modifier une t\\xE2che\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Modifier la t\\xE2che\",\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Enregistrer\",\n      className: \"btn btn-block\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-block\",\n      onClick: onCancel,\n      children: \"Annuler\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(EditTask, \"khL2wo1t/ZUVH9Tt+mAs4tJWjvU=\");\n_c = EditTask;\nexport default EditTask;\nvar _c;\n$RefreshReg$(_c, \"EditTask\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EditTask","_ref","_s","task","onEdit","onCancel","text","setText","handleSubmit","e","preventDefault","alert","id","className","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","onClick","_c","$RefreshReg$"],"sources":["/Users/carolinejustafre/Desktop/ToDoListReact/src/components/EditTask.jsx"],"sourcesContent":["/**\n * Composant fonctionnel EditTask qui gère l'édition d'une tâche.\n * \n * Fonctionnalité :\n * Le composant retourne un formulaire permettant de modifier le texte d'une tâche.\n * Lorsque l'utilisateur soumet le formulaire, la fonction onEdit est appelée avec la tâche éditée.\n * Si le champ de texte est vide, une alerte est affichée pour indiquer qu'il faut ajouter une tâche.\n * \n * --------------------------------------------------\n * \n * Importation :\n * React : Module principal de React.\n * useState : Fonction React permettant de définir et de mettre à jour l'état d'un composant.\n * \n * --------------------------------------------------\n * \n * Props :\n * task : la tâche à éditer.\n * onEdit : fonction qui sera appelée lorsque l'utilisateur soumettra le formulaire d'édition.\n * \n * --------------------------------------------------\n * \n * État :\n * text : état local contenant le texte de la tâche éditée.\n * \n * --------------------------------------------------\n * \n * Fonctions :\n * onSubmit : fonction appelée lorsque l'utilisateur soumet le formulaire d'édition.\n * \n * --------------------------------------------------\n * \n * Puis exportation du composant EditTask afin d'être utilisé dans App.jsx.\n*/\n\nimport React, { useState } from 'react';\n\nconst EditTask = ({ task, onEdit, onCancel }) => {\n  const [text, setText] = useState(task.text);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!text) {\n      alert('Veuillez entrer une tâche');\n      return;\n    }\n\n    onEdit({ id: task.id, text });\n    setText('');\n  };\n\n  return (\n    <form className='add-form' onSubmit={handleSubmit}>\n        <div className='form-control'>\n            <label>Modifier une tâche</label>\n            <input\n            type='text'\n            placeholder='Modifier la tâche'\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            />\n        </div>\n        <input type='submit' value='Enregistrer' className='btn btn-block' />\n        <button className='btn btn-block' onClick={onCancel}>Annuler</button>\n    </form>\n  );\n};\n\nexport default EditTask;\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGC,IAAA,IAAgC;EAAAC,EAAA;EAAA,IAA/B;IAAEC,IAAI;IAAEC,MAAM;IAAEC;EAAS,CAAC,GAAAJ,IAAA;EAC1C,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAACM,IAAI,CAACG,IAAI,CAAC;EAE3C,MAAME,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAElB,IAAI,CAACJ,IAAI,EAAE;MACTK,KAAK,CAAC,2BAA2B,CAAC;MAClC;IACF;IAEAP,MAAM,CAAC;MAAEQ,EAAE,EAAET,IAAI,CAACS,EAAE;MAAEN;IAAK,CAAC,CAAC;IAC7BC,OAAO,CAAC,EAAE,CAAC;EACb,CAAC;EAED,oBACER,OAAA;IAAMc,SAAS,EAAC,UAAU;IAACC,QAAQ,EAAEN,YAAa;IAAAO,QAAA,gBAC9ChB,OAAA;MAAKc,SAAS,EAAC,cAAc;MAAAE,QAAA,gBACzBhB,OAAA;QAAAgB,QAAA,EAAO;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eACjCpB,OAAA;QACAqB,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,sBAAmB;QAC/BC,KAAK,EAAEhB,IAAK;QACZiB,QAAQ,EAAGd,CAAC,IAAKF,OAAO,CAACE,CAAC,CAACe,MAAM,CAACF,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACvC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACA,eACNpB,OAAA;MAAOqB,IAAI,EAAC,QAAQ;MAACE,KAAK,EAAC,aAAa;MAACT,SAAS,EAAC;IAAe;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACrEpB,OAAA;MAAQc,SAAS,EAAC,eAAe;MAACY,OAAO,EAAEpB,QAAS;MAAAU,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAClE;AAEX,CAAC;AAACjB,EAAA,CA9BIF,QAAQ;AAAA0B,EAAA,GAAR1B,QAAQ;AAgCd,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}